# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow that checks for security issues using
# the GCP SCC Cloud Infrastructure as Code Scan Action on
# the IaC files present in the repository.
# The results are uploaded to GitHub Security Code Scanning
#
# For more details on the Action configuration see https://github.com/gcp-scc-cloud-shiftleft/iac-scan-action

name: GCP SCC IaC Scan

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '24 15 * * 1'

permissions:
  contents: read

jobs:
  scc_left_shift_cloud_iac_scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    name: Run GCP SCC Cloud IaC Scan to check
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: iac-scan
        name: IAC Validtion Step
        uses: sanyam803/SCC-Left-Shift-Security@v1.1
        with:
          gcs_credentials: ${{ secrets.GCS_CRDENTIALS }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          planFilePath: "IAC/myplanFile.plan"
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed.
        # And alternative it to add `continue-on-error: true` to the previous step
        if: success() || failure()
        with:
          # The SARIF Log file name is configurable on scan action
          # therefore the file name is best read from the steps output
          sarif_file: ${{ steps.iac-scan.outputs.iac_scan_result_sarif_path }}
